h1. Git et Eclipse

Certes il existe de très nombreuses solutions de gestion des versions de code sources, et le choix n'en est que plus difficile. Aussi Allons-nous non pas nous lancer dans un comparatif des outils existant (plus ou moins libres, suivant les cas), à savoir CVS, Subversion (pour les plus connus et anciens) mais aussi, git[1], mercurial(hg)[2], bazaar[3], etc..., mais directement nous en imposer un pour ce tutoriel: Git.

h2. Imposons une plateforme !

Et nous allons même faire pire, nous nous imposerons l'une des plate-formes d'accueil suivantes: 

* "github.com":http://www.github.com/,
* "gitorious.org":http://www.gitorious.org/.

En effet, notre tutoriel est hébergé, pour des raisons on ne peut plus pratique, sur la plate-forme Github.com. Nous allons donc en découvrir l'utilisation et procéder à l'intégration à notre projet.

En quelques mot, Git est une solution de versioning qui à l'avantage d'être non pas centralisée, mais obéissant au principe de distribution. Ainsi un même dépôt peut être cloné de nombreuses fois par des personnes différentes, et par la suite fusionnés ou  mergés, via l'outil lui même, vers un dépôt maître, nommé "master".

Pour bien comprendre les tenants et aboutissant de Git, la lecture de ce livre "Pragmatic guide to git":http://www.pragprog.com/titles/pg_git/pragmatic-guide-to-git est un must. 

Gardons également en référence ce document "Git Cheat Sheet":http://ktown.kde.org/~zrusin/git/git-cheat-sheet-large.png. 

Certes tous deux écrits dans la langue de Shakespeare, mais ce sont des lectures indispensables pour une gestion des sources réussie. Pour ceux d'entre nous  qui souhaitent aller plus loin, je vous propose la lecture de "Git Community Book"[4] qui existe également en version PDF.

h2. Création du dépôt master

Commençons par intégrer notre projet dans un dépôt maître. Pour cela, assurez vous d'avoir un compte(au passage, totalement gratuit dans le cas ou votre projet reste en accès public) chez github.com. Pour cela je vous laisse parcourir le site et la documentation mise à disposition des utilisateurs. Mais à l'issue de la création du repository de votre projet, vous vous retrouvez avec une url du style:

pre. 
    git@github.com:[username]/[projectname].git

C'est sur cette adresse de dépôt, que nous appellerons par la suite "master", que devra pointer votre dépôt local afin d'y pousser vos modifications.

_*nota:* N'oubliez pas, comme indiqué sur le site de github.com, d'initialiser auparavant les "variables globales GIT suivantes":http://help.github.com/git-email-settings/ :_

pre. 
    $ git config --global user.name "[user_name]"
    $ git config --global user.email "[email_for_user]@gmail.com"

_et de créer et déclarer votre "clé SSH publique":http://help.github.com/linux-key-setup/ , afin de pouvoir pousser votre matière sur le dépôt maître._

Donc, positionnons nous dans le répertoire locale de votre projet

pre. 
    $ cd ~/projets/myplayapp

et lançons l'initialisation du dépôt local avec la commande Git:

pre. 
    $ git init

Voilà qui est fait. Ensuite, ajoutons nos fichiers du projet et commitons ces modifications dans le dépôt local:

pre. 
    $ git add *
    $ git commit -m 'Création du projet intial'

Enfin, déclarons notre dépôt maître, poussons-y les modifications locales:

pre. 
    $ git add remote master git@github.com:[username]/[projectname].git
    $ git push origin master

où @username@ et @projectname@ correspondent à votre nom d'utilisateur sous Github et le nom de votre projet nouvellement créé via l'interface d'administration.

Voilà. Le répository local et le repository maître(master) sont créés et prêt à servir.

Penchons nous du coté d'Eclipse et voyons comment gérer notre dépôt de sources depuis cet IDE.

h2. Eclipse et EGit

Nous sommes parti dans le précédent article pour utiliser Eclipse. Afin d'optimiser notre environnement de travail, je vous propose ici l'installation d'un nouveau plugin permettant d'intégrer à Eclipse l'utilisation de Git: "Egit":http://www.eclipse.org/egit/.

Tout d'abord, un grand merci à la fondation Eclipse pour proposer des outils aussi bien intégrer sur leur site, et ensuite, passons à l'installation qui, tenons nous bien, va être extrêmement complexe:

Via le menu "Help->install new software..." lancer la recherche sur "tous les sites "@All sites@" et rechercher "@egit@". Vous obtiendrez la fenêtre suivante :

p=. !{width:640px;}images/part-2/Capture-2.1-EGit-Install.png(figure 2.1.1 - Installation du plugin EGit sous Eclipse 3.5)!
^figure 2.1.1 - Installation du plugin EGit sous Eclipse 3.5^

* Cochez la case correspondante à "Eclipse EGit (Incubation) 0.10.1"
* cliquez sur "Next"
* accepter les contrats de license (GPL)
* cliquez sur Finish

Un peu de patience...

Voilà, c'est fini.

Enfin, pour découvrir toutes les finesses et subtilités de l'outil, précipitons nous vers les deux pages web suivante :

* "Git for Eclipse users":http://wiki.eclipse.org/EGit/Git_For_Eclipse_Users
* "EGit - User Guide":http://wiki.eclipse.org/EGit/User_Guide

* Si nous ouvrons de nouveau notre projet dans Eclipse (si celui-ci était ouvert tout ce temps, prenons la précaution de le fermer et de le rouvrir, pour que le plugin Egit soit correctement détecté), nous pouvons activer le contrôle de version Git via le menu contextuel en ayant auparavant sélectionné le projet dans l'explorateur du workspace.
Choisissons "@Menu contextuel@ > @Team@ > @Share...@"

p=. !{width:540px;}images/part-2/Capture-2.2-Share-Project.png(figure 2.1.2 - Choix du type de partage de fichier)!
^figure 2.1.2 - Choix du type de partage de fichier^

* Choisissez "Git", et cliquez sur "Next", un seul projet apparait dans votre workspace, sélectionnez le:

p=. !{width:540px;}images/part-2/Capture-2.3-Configure-Git-Repository.png(figure 2.1.3 - Choix du projet dans le workspace)!
^figure 2.1.3 - Choix du projet dans le workspace^


* Une fois le projet sélectionné, vous pouvezvalider le partage Git avec le bouton "Finish". La décoration de label liée à EGit apparaît alors dans votre explorateur de fichier, dans la side bar gauche d'Eclipse:

p=. !images/part-2/Capture-2.4-project-explorer-with-git-label-decoration.png(figure 2.1.4 - Mise en valeur des informations GIT dans l'explorateur de projet)!
^figure 2.1.4 - Mise en valeur des informations GIT dans l'explorateur de projet^

Voilà, votre projet est complètement intégré Git, et Eclipse vous permettra de travailler dans un environnement très professionnel.

h2. Commandes de base

Nous allons voir comment survivre avec les commandes basiques git.

h3. créer un dépôt local

pre. 
c:\> mkdir monprojet
c:\> cd monprojet
c:\> git init

^listing 2.2.1 - création d'un depôt local^

Par cette simple commande, un dépot git local est créé dans le répertoire courant, ici @monprojet@.


h3. Ajouter un dépôt distant

pre. 
git add remote master [git@github.com:username/projectname.git]

Ici, le dépôt @projectname@ de l'utilisateur @username@ sur le site @github.com@ a été ajouté comme dépôt remote en protocol @git@.

un autre exemple:

pre. 
git add remote master [http://username@github.com/username/projectname.git]

fait la même chose mais en s'appuyant sur le protocole HTTP.

h3. Ajouter un(des) fichiers

pre. 
git add [path/file]

Le fichier @path/file@ est ajouter au prochain commit.

Exemple d'ajout de plusieurs fichiers dans un répertoire:

pre. 
git add path/*.java

tous les fichiers comportant l'extension @.java@ ont été ajouter au prochain commit.

h3. Commiter des changement en local

pre. 
git comit -m "mon message de log de commit"

Ici les derniers fichier ajoutés par la commande @git add@ sont poussés dans le dépôt local avec le commentaire "mon message de log de commit" attaché.

h3. Status des fichiers d'un dépôt

pre. 
git status

la sortie console présente alors les différences entre le dépot "master" et le dépôt local.

h3. Pousser des changement vers master

pre. 
git push origin master

Toutes les modifications commitées préallablement seront poussées vers le dépôt "remote" nommé @origin@ dans la branche @master@.

h3. Tirer les dernières modifications du master

pre. 
git pull

Un listing des ressources modifiées importées est affiché dans la console:

Si aucune différence n'existe, que nos dépôts sont synchronisés, le message suivant sera ffiché:

pre. 
c:\> git pull
Already up-to-date.


h3. Créer une branche

pre. 
git branch [branch-name]

où @branch-name@ est le nom de la branche

si nous faisons un simple @git branch@, la liste des branches existantes est affichées.

bq. *note:* Attention, seules les branches locales sont listées.

h3. Changer de branche

pre. 
git checkout [branch-name]

switch vers la branche @[branch-name]@.

h3. Merge d'une branche dans une autre

pre. 
git checkout [ma-branche-cible]
git merge [ma-branche-source]

et voilà, les infos de la branche @[ma-branche-source]@ ont été mergées dans la branche 
@[ma-branche-cible]@.

En cas de conflit, @git@ vous indique les fichiers incriminés et vous propose de gérer le merge manuellement afin de les résoudre.

h2. Références


fn1. site de Git "http://git-scm.com/":http://git-scm.com/

fn2. Site de Mercurial (Hg) tools "http://mercurial.selenic.com/":http://mercurial.selenic.com/

fn3. Site de Bazaar "http://bazaar.canonical.com/en/":http://bazaar.canonical.com/en/

fn4. Livre sur Git écrit par la communauté d'utilisateur: "http://book.git-scm.com/":http://book.git-scm.com/
